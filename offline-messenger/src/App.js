import React, { useState, useEffect, useRef, useCallback } from 'react';
import { FaPaperPlane, FaNetworkWired, FaClock, FaCheck, FaCheckDouble, FaDownload } from 'react-icons/fa';

import './App.css';
import { initPeer, sendMessage } from './services/peerService';
import { addMessage as saveToStorage, getMessageQueue, updateMessageStatus } from './services/messageQueue';
import { encryptMessage, decryptMessage } from './utils/crypto';
import { getDeviceId } from './utils/deviceId';

const App = () => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [targetId, setTargetId] = useState('');
  const [theme, setTheme] = useState('light');
  const [isConnected, setIsConnected] = useState(false);
  const [flyingId, setFlyingId] = useState(null);
  const [showInstallButton, setShowInstallButton] = useState(false);
  const [installPrompt, setInstallPrompt] = useState(null);
  const [peerCount, setPeerCount] = useState(0);

  const MY_DEVICE_ID = getDeviceId();
  const MAX_HOPS = 10;
  const messagesEndRef = useRef(null);
  const peerInstanceRef = useRef(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  useEffect(() => {
    const saved = getMessageQueue();
    setMessages(saved);
  }, []);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã (—Å–≤–µ—Ç–ª–∞—è/—Ç—ë–º–Ω–∞—è)
  useEffect(() => {
    const hour = new Date().getHours();
    const savedTheme = localStorage.getItem('app-theme');
    setTheme(savedTheme || (hour >= 20 || hour < 7 ? 'dark' : 'light'));
  }, []);

  useEffect(() => {
    document.body.setAttribute('data-theme', theme);
    localStorage.setItem('app-theme', theme);
  }, [theme]);

  // –ê–≤—Ç–æ-—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages, scrollToBottom]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const addMessage = useCallback((msg) => {
    setMessages((prev) => {
      if (prev.some(m => m.id === msg.id)) return prev;
      const updated = [...prev, msg];
      localStorage.setItem('messageQueue', JSON.stringify(updated));
      return updated;
    });
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const updateMessage = useCallback((msgId, updates) => {
    setMessages((prev) =>
      prev.map((m) => (m.id === msgId ? { ...m, ...updates } : m))
    );
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ ACK (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)
  const sendAck = useCallback((msgId, recipientId) => {
    const ackMsg = {
      type: 'ACK',
      msgId,
      from: MY_DEVICE_ID,
      to: recipientId,
      hopCount: 0,
      maxHops: MAX_HOPS,
    };
    sendMessage(recipientId, ackMsg);
  }, [MY_DEVICE_ID]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ Read Receipt (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ)
  const sendReadReceipt = useCallback((msgId, recipientId) => {
    const readMsg = {
      type: 'READ',
      msgId,
      from: MY_DEVICE_ID,
      to: recipientId,
      hopCount: 0,
      maxHops: MAX_HOPS,
    };
    sendMessage(recipientId, readMsg);
  }, [MY_DEVICE_ID]);

  // –†–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
  const forwardMessage = useCallback((msg) => {
    const peerInstance = peerInstanceRef.current;
    if (!peerInstance) return;

    msg.hopCount += 1;
    if (msg.hopCount >= msg.maxHops) {
      console.log(`‚õî –õ–∏–º–∏—Ç –ø—Ä—ã–∂–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: ${msg.id}`);
      return;
    }

    Object.keys(peerInstance.connections).forEach((peerId) => {
      if (peerId !== msg.from) {
        const conn = peerInstance.connections[peerId][0];
        if (conn && conn.open) {
          conn.send(msg);
        }
      }
    });

    console.log(`üîÅ –†–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è: ${msg.id} ‚Üí ${Object.keys(peerInstance.connections).join(', ')}`);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleIncomingMessage = useCallback(async (data) => {
    if (data.from === MY_DEVICE_ID) return;
    if (messages.some(m => m.id === data.id)) return;

    const msg = { ...data };

    if (msg.type === 'ACK') {
      if (msg.to === MY_DEVICE_ID) {
        updateMessage(msg.msgId, { status: 'delivered' });
      } else {
        forwardMessage(msg);
      }
      return;
    }

    if (msg.type === 'READ') {
      if (msg.to === MY_DEVICE_ID) {
        updateMessage(msg.msgId, { status: 'read' });
      } else {
        forwardMessage(msg);
      }
      return;
    }

    if (msg.to === MY_DEVICE_ID) {
      try {
        const decrypted = await decryptMessage(msg.content);
        const fullMsg = {
          ...msg,
          decryptedContent: decrypted,
          status: 'delivered',
        };
        addMessage(fullMsg);
        setIsConnected(true);
        sendAck(msg.id, msg.from);
        sendReadReceipt(msg.id, msg.from);
      } catch (e) {
        addMessage({
          ...msg,
          decryptedContent: '(–æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏)',
          status: 'delivered',
        });
      }
    } else {
      forwardMessage(msg);
    }
  }, [messages, MY_DEVICE_ID, addMessage, updateMessage, sendAck, sendReadReceipt, forwardMessage]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessageTo = async () => {
    if (!newMessage.trim() || !targetId) return;
    if (targetId === MY_DEVICE_ID) {
      alert('–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–±–µ');
      return;
    }

    try {
      const encrypted = await encryptMessage(newMessage);
      const msgId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;
      const msg = {
        id: msgId,
        from: MY_DEVICE_ID,
        to: targetId,
        content: encrypted,
        timestamp: Date.now(),
        hopCount: 0,
        maxHops: MAX_HOPS,
        decryptedContent: newMessage,
        status: 'sent',
      };

      addMessage(msg);
      setFlyingId(msgId);
      setTimeout(() => setFlyingId(null), 600);

      sendMessage(targetId, msg);
      setNewMessage('');
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', e);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è P2P
  useEffect(() => {
    const peerInstance = initPeer(handleIncomingMessage);
    peerInstanceRef.current = peerInstance;

    peerInstance.on('connection', () => {
      setPeerCount(Object.keys(peerInstance.connections).length);
    });
    peerInstance.on('disconnected', () => {
      setPeerCount(Object.keys(peerInstance.connections).length);
    });

    return () => {
      if (peerInstance) peerInstance.destroy();
    };
  }, [handleIncomingMessage]);

  // PWA: —É—Å—Ç–∞–Ω–æ–≤–∫–∞
  useEffect(() => {
    const handleBeforeInstallPrompt = (e) => {
      e.preventDefault();
      setInstallPrompt(e);
      setShowInstallButton(true);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', () => {
      setShowInstallButton(false);
      setInstallPrompt(null);
      console.log('PWA: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    });

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    };
  }, []);

  const handleInstallClick = async () => {
    if (!installPrompt) return;
    installPrompt.prompt();
    const { outcome } = await installPrompt.userChoice;
    console.log(`PWA: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${outcome}`);
    setInstallPrompt(null);
    setShowInstallButton(false);
  };

  return (
    <div className="container">
      <header className="header">
        <h1>–ú–µ—Å—Ç–æ –í—Å—Ç—Ä–µ—á–∏</h1>
        <p>–û—Ñ—Ñ–ª–∞–π–Ω–æ–≤—ã–π mesh-–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</p>
      </header>

      {/* –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA */}
      {showInstallButton && (
        <div className="install-button" onClick={handleInstallClick}>
          <FaDownload />
          –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        </div>
      )}

      <div className={`connection-status ${isConnected ? 'online' : ''}`}>
        <FaNetworkWired /> {peerCount} —É–∑–ª–æ–≤ | {isConnected ? 'Mesh-—Å–µ—Ç—å –∞–∫—Ç–∏–≤–Ω–∞' : '–ü–æ–∏—Å–∫...'}
      </div>

      <div className="theme-toggle">
        <button className={theme === 'light' ? 'active' : ''} onClick={() => setTheme('light')}>
          –°–≤–µ—Ç–ª–∞—è
        </button>
        <button className={theme === 'dark' ? 'active' : ''} onClick={() => setTheme('dark')}>
          –¢—ë–º–Ω–∞—è
        </button>
      </div>

      <div className="device-info">
        <strong>–¢—ã:</strong> <code>{MY_DEVICE_ID}</code>
      </div>

      <div className="messages">
        {messages.length === 0 ? (
          <div className="empty">üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</div>
        ) : (
          messages.map((msg) => (
            <Message
              key={msg.id}
              message={msg}
              isMe={msg.from === MY_DEVICE_ID}
              flying={flyingId === msg.id}
              MY_DEVICE_ID={MY_DEVICE_ID}
            />
          ))
        )}
        <div ref={messagesEndRef} />
      </div>

      <div className="message-form">
        <div className="input-group">
          <input
            type="text"
            value={targetId}
            onChange={(e) => setTargetId(e.target.value)}
            placeholder="ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
          />
          <button onClick={sendMessageTo} disabled={!newMessage.trim() || !targetId}>
            <FaPaperPlane />
          </button>
        </div>
        <textarea
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        />
      </div>

      <footer className="footer">
        –ú–µ—Å—Ç–æ –í—Å—Ç—Ä–µ—á–∏ ¬© 2025 ‚Ä¢ Mesh-—Å–µ—Ç—å ‚Ä¢ –ë–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
      </footer>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω)
const Message = React.memo(({ message, isMe, flying }) => {
  return (
    <div className={`message ${isMe ? 'sent' : 'received'} ${flying ? 'flying' : ''}`}>
      <div className="message-content">
        {!isMe && message.hopCount > 0 && (
          <div className="message-header">—á–µ—Ä–µ–∑ {message.hopCount} –ø—Ä—ã–∂–∫–∞(–æ–≤)</div>
        )}
        <div className="message-body">{message.decryptedContent || '(–æ—à–∏–±–∫–∞)'}</div>
        <div className="message-footer">
          {new Date(message.timestamp).toLocaleTimeString()}
          {isMe && (
            <span style={{ marginLeft: '8px' }}>
              {message.status === 'sent' && <FaClock title="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" />}
              {message.status === 'delivered' && <FaCheck title="–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ" />}
              {message.status === 'read' && (
                <FaCheckDouble title="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ" style={{ color: '#6a9eff' }} />
              )}
            </span>
          )}
        </div>
      </div>
    </div>
  );
});

export default App;